[info] ParsingTests:
[info] - parsing a simple program gives the correct tree
[info] - parsing a multiplication expression produces the correct tree
[info] - parsing a division expression produces the correct tree
[info] - * is left associative
[info] - / is left associative
[info] - parsing a function application expression produces the correct tree
[info] - parsing a let expression produces the correct tree
[info] - parsing a less than expression produces the correct tree
[info] - parsing a conditional expression produces the correct tree
[info] - parsing an anonymous function expression produces the correct tree
[info] - parsing a chain of anonymous function expressions produces the correct tree
[info] - + has lower precedence than / (to right)
[info] - - has lower precedence than / (to right)
[info] - + has lower precedence than / (to left)
[info] - - has lower precedence than / (to left)
[info] - parsing an identifier of one letter produces the correct tree
[info] - parsing an identifier as an identifier produces the correct tree
[info] - parsing an identifier containing digits and underscores produces the correct tree
[info] - parsing an integer as an identifier gives an error
[info] - parsing a non-identifier as an identifier gives an error (digit)
[info] - parsing a non-identifier as an identifier gives an error (underscore)
[info] - parsing a keyword as an identifier gives an error
[info] - parsing a keyword prefix as an identifier produces the correct tree
[info] - parsing an integer of one digit as an integer produces the correct tree
[info] - parsing an integer as an integer produces the correct tree
[info] - parsing a non-integer as an integer gives an error
[info] - parsing an addition expression produces the correct tree
[info] - parsing a subtraction expression produces the correct tree
[info] - parsing an integer expression produces the correct tree
[info] - parsing a true expression produces the correct tree
[info] - parsing a false expression produces the correct tree
[info] - parsing an identifier expression produces the correct tree
[info] - parsing a parenthesized expression produces the correct tree
[info] - parsing the int type produces the correct tree
[info] - + is left associative
[info] - - is left associative
[info] - parentheses override associativity in expressions
[info] - -> is right associative
[info] - parentheses override associativity in types
[info] - application has a lower precedence than + (to left)
[info] - application has a lower precedence than - (to left)
[info] - + has lower precedence than * (to left)
[info] - - has lower precedence than * (to left)
[info] - application has lower precedence than + (to right)
[info] - application has lower precedence than - (to right)
[info] - + has lower precedence than * (to right)
[info] - - has lower precedence than * (to right)
[info] - parentheses override precedence (to left)
[info] - parentheses override precedence (to right)
[info] - a program with a few expressions produces the correct tree
[info] - programs with comments in them work
[info] - factorial program produces the correct tree (file test/factorial.func332)
